{"version":3,"sources":["components/Header.js","components/SelectDepositAsset.js","components/SelectBorrowAsset.js","components/DepositAmountTextbox.js","components/BorrowAmountTextbox.js","components/GraphRadio.js","components/CurrencyRadio.js","hooks/useParamsHistoryData.js","helpers.js","components/Graph.js","components/CurrentAPYDisplay.js","components/Avg30DayAPYDisplay.js","components/Avg30DayVariableAPYDisplay.js","components/InterestBalance.js","components/CurrentBorrowDisplay.js","components/Footer.js","components/App.js","index.js"],"names":["Header","className","GET_ASSET_SYMBOLS","gql","SelectDepositAsset","onChange","value","depositAssetAsCollatoral","setDepositAssetAsCollatoral","useQuery","loading","error","data","message","class","id","e","console","log","target","reserves","map","reserve","i","symbol","for","GET_BORROWABLE_ASSET_SYMBOLS","SelectBorrowAsset","fetchPolicy","DepositAmountTextbox","type","name","parseInt","BorrowAmountTextbox","GraphRadio","radioSelectedOption","handleChange","role","aria-label","disabled","autoComplete","checked","CurrencyRadio","currencySelectedOption","useParamsHistoryData","query","timestampMax","timestampMin","queryResult","variables","timestamp_gt","timestamp_lte","first","notifyOnNetworkStatusChange","fetchMore","paramsHistory","maxLoadedTimestamp","useMemo","timestamp","reduce","prev","current","Math","max","useEffect","a","getInstantPoolDepositAPY","decimals","utilizationRate","getDecimal","averageStableRate","totalPrincipalStableDebt","variableBorrowRate","totalCurrentVariableDebt","reserveFactor","totalDebt","shareStableBorrows","shareVariableBorrows","BigNumber","getAverageRate","liquidityIndexEarliest","liquidityIndexLatest","timestampEarliest","timestampLatest","calculateAverageRate","number","precision","formatAsPercent","decimal","parseFloat","toFixed","downsampleData","targetLength","length","window","sampled","round","GET_HISTORICAL_ASSET_DATA_FOR_AVG_APY","GET_HISTORICAL_ASSET_DATA_FOR_VARIABLE_RATE","Graph","asset","deposit","borrowAsset","borrowAmount","graphType","setInterestOwed","setInterestEarned","useState","Date","now","daysAgo30","dataAvg","loadingAvg","errorAvg","dataBor","loadingBor","errorBor","graphData","invariant","interests","day","Principle","Borrowed","Interest","InterestUsd","OwedInterest","OwedInterestUsd","DepositRate","BorrowRate","uniqBy","averageRate","liquidityIndex","interest","interestUsd","priceInUsd","formatGraphData","graphDataVariableBorrow","variableBorrowIndex","formatGraphDataVariableBorrowed","ResponsiveContainer","width","height","ComposedChart","padding","top","margin","right","left","bottom","CartesianGrid","strokeDasharray","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","label","position","scale","domain","tickCount","angle","interval","tickFormatter","unixTime","toLocaleDateString","month","dataKey","YAxis","Tooltip","labelFormatter","toLocaleString","formatter","toString","concat","Legend","verticalAlign","Line","unit","stackId","fill","stroke","LineChart","GET_ASSET_DATA_FOR_APY","CurrentAPYDisplay","pollInterval","style","GET_ASSET_DATA_FOR_AVG_APY_30_DAYS","Avg30DayAPYDisplay","timestamp_gte","lastUpdateTimestamp","GET_ASSET_DATA_FOR_AVG_VARIABLE_30_DAYS","Avg30DayVariableAPYDisplay","InterestBalance","interestEarned","interestOwed","abs","GET_ASSET_DATA_FOR_BORROW_APR","CurrentBorrowDisplay","Fragment","stableBorrowRate","Footer","App","setAsset","setBorrowAsset","setDeposit","borrowed","setBorrowed","setRadioSelectedOption","setCurrencySelectedOption","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","Reserve","merge","existing","incoming","args","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31f6f64b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <div className=\"App-header\">\n           <h1>Aave Interest Calculator</h1>\n        </div>\n     );\n}\n\nexport default Header;","import React from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst GET_ASSET_SYMBOLS = gql`\n  query GetAssetSymbols {\n    reserves (where: {isActive: true}, orderBy: symbol) {\n        symbol\n        usageAsCollateralEnabled\n        borrowingEnabled\n    }\n}\n`;\n\nfunction SelectDepositAsset({ onChange, value, depositAssetAsCollatoral, setDepositAssetAsCollatoral }) {\n    const { loading, error, data } = useQuery(GET_ASSET_SYMBOLS);\n\n    function handleChange(e) {\n        console.log(\"Asset Selected!!\")\n        onChange?.(e.target.value);\n        // onChange?.(JSON.parse(e.target.value).symbol);\n        // setDepositAssetAsCollatoral?.(JSON.parse(e.target.value).collateral);\n    }\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;\n    \n    return (\n        <form class=\"form-floating\">\n        <select id=\"floatingSelectDepositValue\" class=\"form-select form-select-sm mb-3\" onChange={handleChange} value={value}>\n            {data.reserves.map((reserve, i) => (\n                <option key={reserve.symbol} value={reserve.symbol}>\n                    {reserve.symbol}\n                </option>\n            ))}\n        </select>\n        <label for=\"floatingSelectDepositValue\">Deposit Asset</label>\n        </form>\n    );\n}\n\nexport default SelectDepositAsset;\n","import React from 'react'\nimport { gql, useQuery } from '@apollo/client'\n\nconst GET_BORROWABLE_ASSET_SYMBOLS = gql`\n  query GetBorrowAssetSymbols {\n    reserves (where: {isActive: true, borrowingEnabled: true}, orderBy: symbol) {\n        symbol\n    }\n}\n`;\n\nfunction SelectBorrowAsset({ onChange, value }) {\n    const { loading, error, data } = useQuery(GET_BORROWABLE_ASSET_SYMBOLS, {\n        fetchPolicy: \"network-only\"\n      });\n\n    function handleChange(e) {\n        console.log(\"Borrow Asset Selected!!\");\n        onChange?.(e.target.value);\n    }\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;\n    \n    return (\n        <form class=\"form-floating\">\n        <select id=\"floatingSelectBorrowValue\" class=\"form-select form-select-sm mb-3\" onChange={handleChange} value={value}>\n            {data.reserves.map((reserve, i) => (\n                <option key={reserve.symbol} value={reserve.symbol}>\n                    {reserve.symbol}\n                </option>\n            ))}\n        </select>\n        <label for=\"floatingSelectBorrowValue\">Borrow Asset</label>\n        </form>\n    );\n}\n\nexport default SelectBorrowAsset;\n","import React from 'react';\n\nfunction DepositAmountTextbox({ onChange, value }) {\n\n    function handleChange(e) {\n        console.log(\"Deposit Amount Entered!\");\n        onChange?.(parseInt(e.target.value));\n    }\n    \n    return (\n        <form class=\"form-floating\">\n            <input class=\"form-control\" id=\"floatingInputValueDeposit\" type=\"text\" name=\"deposit\" onChange={handleChange} value={value}/>\n            <label for=\"floatingInputValueDeposit\">Deposit Amount</label>\n        </form>\n    );\n    //<input type=\"submit\" value=\"Submit\" />\n}\n\nexport default DepositAmountTextbox;\n","import React from 'react';\n\nfunction BorrowAmountTextbox({ onChange, value }) {\n\n    function handleChange(e) {\n        console.log(\"Borrow Amount Entered!\");\n        onChange?.(parseInt(e.target.value));\n    }\n    \n    return (\n        <form class=\"form-floating\">\n            <input class=\"form-control\" id=\"floatingInputValueBorrow\" type=\"text\" name=\"borrow\" onChange={handleChange} value={value}/>\n            <label for=\"floatingInputValueBorrow\">Borrow Amount</label>\n        </form>\n    );\n    //<input type=\"submit\" value=\"Submit\" />\n}\n\nexport default BorrowAmountTextbox;\n","import React from 'react';\n\nfunction GraphRadio({onChange, radioSelectedOption}) {\n\n    function handleChange(e) {\n        onChange?.(e.target.value);\n    }\n      \n    return (\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\" disabled>Graph</button>\n            <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" value=\"interest\" autoComplete=\"off\" checked={radioSelectedOption === \"interest\"} onChange={handleChange}/>\n            <label class=\"btn btn-outline-secondary\" for=\"btnradio1\">Interest</label>\n\n            <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" value=\"rate\" autoComplete=\"off\" checked={radioSelectedOption === \"rate\"} onChange={handleChange}/>\n            <label class=\"btn btn-outline-secondary\" for=\"btnradio2\">Rate</label>\n\n        </div>\n    );\n}\n\nexport default GraphRadio;","import React from 'react';\n\nfunction CurrencyRadio({onChange, currencySelectedOption}) {\n\n    function handleChange(e) {\n        onChange?.(e.target.value);\n    }\n      \n    return (\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Radio buttons for currency\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\" disabled>Currency</button>\n            <input type=\"radio\" class=\"btn-check\" name=\"btnradiocurrency\" id=\"btnradio3\" value=\"native\" autoComplete=\"off\" checked={currencySelectedOption === \"native\"} onChange={handleChange}/>\n            <label class=\"btn btn-outline-secondary\" for=\"btnradio3\">Native</label>\n\n            <input type=\"radio\" class=\"btn-check\" name=\"btnradiocurrency\" id=\"btnradio4\" value=\"usd\" autoComplete=\"off\" checked={currencySelectedOption === \"usd\"} onChange={handleChange}/>\n            <label class=\"btn btn-outline-secondary\" for=\"btnradio4\">USD</label>\n\n        </div>\n    );\n}\n\nexport default CurrencyRadio;","import { useQuery } from '@apollo/client';\nimport { useEffect, useMemo } from 'react';\n\nfunction useParamsHistoryData(query, symbol, timestampMax, timestampMin) {\n  const queryResult = useQuery(query, {\n    variables: {\n      symbol,\n      timestamp_gt: timestampMin,\n      timestamp_lte: timestampMax,\n      first: 1000,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const { data, fetchMore } = queryResult;\n  const paramsHistory = data?.reserves?.[0]?.paramsHistory;\n\n  const maxLoadedTimestamp = useMemo(\n    () =>\n      paramsHistory\n        ?.map(({ timestamp }) => timestamp)\n        ?.reduce((prev, current) => Math.max(prev, current), 0),\n    [paramsHistory]\n  );\n\n  useEffect(() => {\n    if (!maxLoadedTimestamp) return;\n\n    (async function () {\n      fetchMore({\n        variables: {\n          timestamp_gt: maxLoadedTimestamp,\n        },\n      });\n    })();\n  }, [maxLoadedTimestamp, fetchMore]);\n\n  return queryResult;\n}\n\nexport { useParamsHistoryData };\n","import { calculateAverageRate } from \"@aave/protocol-js\";\nimport BigNumber from 'bignumber.js';\nimport { invariant } from 'ts-invariant';\nimport { uniqBy } from 'lodash';\n\nexport const SAMPLE_DAI =\n    {\n        \"data\": {\n          \"reserves\": [\n            {\n              \"availableLiquidity\": \"11303731944585319881555897\",\n              \"averageStableRate\": \"95886728849119943620471068\",\n              \"isActive\": true,\n              \"lifetimeCurrentVariableDebt\": \"81352885969434867433051411\",\n              \"lifetimeDepositorsInterestEarned\": \"236551322676946139879721\",\n              \"lifetimeFlashLoanPremium\": \"7156636381425120763712\",\n              \"lifetimePrincipalStableDebt\": \"65296461213986434427219834\",\n              \"lifetimeReserveFactorAccrued\": \"26286902720158201599577\",\n              \"lifetimeScaledVariableDebt\": \"79624598585473228428691656\",\n              \"name\": \"Dai Stablecoin\",\n              \"reserveFactor\": \"1000\",\n              \"stableBorrowRate\": \"91091899296619830869052896\",\n              \"stableRateSlope1\": \"20000000000000000000000000\",\n              \"stableRateSlope2\": \"750000000000000000000000000\",\n              \"symbol\": \"DAI\",\n              \"totalCurrentVariableDebt\": \"16728419339117889298403838\",\n              \"totalLiquidity\": \"56368432978718592427891383\",\n              \"totalLiquidityAsCollateral\": \"36043310867401735553957915\",\n              \"totalPrincipalStableDebt\": \"28522412205974793537950248\",\n              \"totalScaledVariableDebt\": \"16373035313672501819566050\",\n              \"utilizationRate\": \"0.79946698\",\n              \"variableBorrowRate\": \"41091899296619830869052896\",\n              \"variableRateSlope1\": \"40000000000000000000000000\",\n              \"variableRateSlope2\": \"750000000000000000000000000\"\n            }\n          ]\n        }\n    }\n\nexport const SAMPLE_DATA = {\n    \"data\": {\n        \"reserves\": [\n        {\n            \"availableLiquidity\": \"47210658635949973799732\",\n            \"averageStableRate\": \"91233637948306016372035328\",\n            \"lifetimeCurrentVariableDebt\": \"3457750710914715459300187\",\n            \"lifetimeDepositorsInterestEarned\": \"23517530313177856093787\",\n            \"lifetimeFlashLoanPremium\": \"889542984595136874343\",\n            \"lifetimePrincipalStableDebt\": \"7807950749093583723002001\",\n            \"lifetimeReserveFactorAccrued\": \"2612925942626910031441\",\n            \"lifetimeScaledVariableDebt\": \"3303051083302958948642511\",\n            \"name\": \"TrueUSD\",\n            \"reserveFactor\": \"1000\",\n            \"stableBorrowRate\": \"795266671770843551133878239\",\n            \"stableRateSlope1\": \"20000000000000000000000000\",\n            \"stableRateSlope2\": \"750000000000000000000000000\",\n            \"symbol\": \"TUSD\",\n            \"totalCurrentVariableDebt\": \"1038868146590976593574621\",\n            \"totalLiquidity\": \"3867366248058916931100290\",\n            \"totalLiquidityAsCollateral\": \"-1974049074307742834097517\",\n            \"totalPrincipalStableDebt\": \"2801433396089537885426534\",\n            \"totalScaledVariableDebt\": \"992389227532978694359465\",\n            \"utilizationRate\": \"0.98779255\",\n            \"variableBorrowRate\": \"745266671770843551133878239\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"750000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"63500741\",\n            \"averageStableRate\": \"0\",\n            \"lifetimeCurrentVariableDebt\": \"853007627\",\n            \"lifetimeDepositorsInterestEarned\": \"1550432\",\n            \"lifetimeFlashLoanPremium\": \"27644\",\n            \"lifetimePrincipalStableDebt\": \"0\",\n            \"lifetimeReserveFactorAccrued\": \"0\",\n            \"lifetimeScaledVariableDebt\": \"846859392\",\n            \"name\": \"Gemini dollar\",\n            \"reserveFactor\": \"0\",\n            \"stableBorrowRate\": \"79399448930022241933563893\",\n            \"stableRateSlope1\": \"40000000000000000000000000\",\n            \"stableRateSlope2\": \"1000000000000000000000000000\",\n            \"symbol\": \"GUSD\",\n            \"totalCurrentVariableDebt\": \"236010256\",\n            \"totalLiquidity\": \"297937051\",\n            \"totalLiquidityAsCollateral\": \"40918732\",\n            \"totalPrincipalStableDebt\": \"0\",\n            \"totalScaledVariableDebt\": \"234309161\",\n            \"utilizationRate\": \"0.78686524\",\n            \"variableBorrowRate\": \"39399448930022241933563894\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"1000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"900655118461993297726\",\n            \"averageStableRate\": \"0\",\n            \"lifetimeCurrentVariableDebt\": \"1069770143523690810011\",\n            \"lifetimeDepositorsInterestEarned\": \"759388594472854642\",\n            \"lifetimeFlashLoanPremium\": \"15102272713234773\",\n            \"lifetimePrincipalStableDebt\": \"0\",\n            \"lifetimeReserveFactorAccrued\": \"189974906816760645\",\n            \"lifetimeScaledVariableDebt\": \"1063091971169656094310\",\n            \"name\": \"yearn.finance\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"13805762165498702956009942\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"YFI\",\n            \"totalCurrentVariableDebt\": \"59657613771429404878\",\n            \"totalLiquidity\": \"959350642343295394873\",\n            \"totalLiquidityAsCollateral\": \"259090849776057044120\",\n            \"totalPrincipalStableDebt\": \"0\",\n            \"totalScaledVariableDebt\": \"59284918883002735552\",\n            \"utilizationRate\": \"0.06118255\",\n            \"variableBorrowRate\": \"9664033515849092069206960\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"2321121097254294286676050\",\n            \"averageStableRate\": \"52397445834379115698718589\",\n            \"lifetimeCurrentVariableDebt\": \"721371293525103031715277\",\n            \"lifetimeDepositorsInterestEarned\": \"369448680059558722725\",\n            \"lifetimeFlashLoanPremium\": \"161184827771673334200\",\n            \"lifetimePrincipalStableDebt\": \"63612643305475476156047\",\n            \"lifetimeReserveFactorAccrued\": \"92427759108483440544\",\n            \"lifetimeScaledVariableDebt\": \"717907308240712133994549\",\n            \"name\": \"Basic Attention Token\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"41323827600813311470235175\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"BAT\",\n            \"totalCurrentVariableDebt\": \"98788388334604818432866\",\n            \"totalLiquidity\": \"2445130448692177050620576\",\n            \"totalLiquidityAsCollateral\": \"659234594557115940204816\",\n            \"totalPrincipalStableDebt\": \"25834922697437575780247\",\n            \"totalScaledVariableDebt\": \"98310259779088042638413\",\n            \"utilizationRate\": \"0.05071686\",\n            \"variableBorrowRate\": \"7926679320569318029164622\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"3303709814310665236040631\",\n            \"averageStableRate\": \"31414320708014194200430364\",\n            \"lifetimeCurrentVariableDebt\": \"3657477717872876099780776\",\n            \"lifetimeDepositorsInterestEarned\": \"295520846567940698005\",\n            \"lifetimeFlashLoanPremium\": \"62599085514213028704\",\n            \"lifetimePrincipalStableDebt\": \"16418670935684582961430\",\n            \"lifetimeReserveFactorAccrued\": \"159235396673163737626\",\n            \"lifetimeScaledVariableDebt\": \"3652111224052192862373791\",\n            \"name\": \"Decentraland MANA\",\n            \"reserveFactor\": \"3500\",\n            \"stableBorrowRate\": \"31757532443164194714424298\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"MANA\",\n            \"totalCurrentVariableDebt\": \"14477382565584225204826\",\n            \"totalLiquidity\": \"3329529275006157033752946\",\n            \"totalLiquidityAsCollateral\": \"-297101498428431192875548\",\n            \"totalPrincipalStableDebt\": \"11859227848393833534440\",\n            \"totalScaledVariableDebt\": \"14456107333356351039566\",\n            \"utilizationRate\": \"0.00775468\",\n            \"variableBorrowRate\": \"1230272710214936300097009\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"1646569939415426447700166\",\n            \"averageStableRate\": \"113977414605081642318524\",\n            \"lifetimeCurrentVariableDebt\": \"294239261546626745106103\",\n            \"lifetimeDepositorsInterestEarned\": \"36748470230167550413\",\n            \"lifetimeFlashLoanPremium\": \"18446924054124790161\",\n            \"lifetimePrincipalStableDebt\": \"1643265091599495689\",\n            \"lifetimeReserveFactorAccrued\": \"9193260152679695037\",\n            \"lifetimeScaledVariableDebt\": \"293826597401688073812347\",\n            \"name\": \"Uniswap\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"13317180483421666340402675\",\n            \"stableRateSlope1\": \"120000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"UNI\",\n            \"totalCurrentVariableDebt\": \"86549174109685699757010\",\n            \"totalLiquidity\": \"1733056595987989276676380\",\n            \"totalLiquidityAsCollateral\": \"552606771079574782146470\",\n            \"totalPrincipalStableDebt\": \"1533265091599495689\",\n            \"totalScaledVariableDebt\": \"86427790781229167700637\",\n            \"utilizationRate\": \"0.04990411\",\n            \"variableBorrowRate\": \"7768355281995972031901560\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"499070505438\",\n            \"averageStableRate\": \"35369454908078058431304393\",\n            \"lifetimeCurrentVariableDebt\": \"224645595163\",\n            \"lifetimeDepositorsInterestEarned\": \"33955988\",\n            \"lifetimeFlashLoanPremium\": \"7583305\",\n            \"lifetimePrincipalStableDebt\": \"9938010343\",\n            \"lifetimeReserveFactorAccrued\": \"8481607\",\n            \"lifetimeScaledVariableDebt\": \"224012793497\",\n            \"name\": \"Wrapped BTC\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"42147964241914102393895392\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"WBTC\",\n            \"totalCurrentVariableDebt\": \"39239027030\",\n            \"totalLiquidity\": \"541752565245\",\n            \"totalLiquidityAsCollateral\": \"457199235819\",\n            \"totalPrincipalStableDebt\": \"3483986745\",\n            \"totalScaledVariableDebt\": \"39128495053\",\n            \"utilizationRate\": \"0.07878515\",\n            \"variableBorrowRate\": \"9718371393531281915116314\",\n            \"variableRateSlope1\": \"80000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"6380402156873500224096148\",\n            \"averageStableRate\": \"12849128805907208891557074\",\n            \"lifetimeCurrentVariableDebt\": \"3469327253230166919065688\",\n            \"lifetimeDepositorsInterestEarned\": \"1742100415501910625029\",\n            \"lifetimeFlashLoanPremium\": \"10150925060553953415\",\n            \"lifetimePrincipalStableDebt\": \"2523506913785956643272854\",\n            \"lifetimeReserveFactorAccrued\": \"435815318313191705278\",\n            \"lifetimeScaledVariableDebt\": \"3461404235772096977911262\",\n            \"name\": \"Republic Token\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"37259037164585732225873844\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"REN\",\n            \"totalCurrentVariableDebt\": \"723940759172788151405\",\n            \"totalLiquidity\": \"7663667017956422233405617\",\n            \"totalLiquidityAsCollateral\": \"-2065181411267808585296913\",\n            \"totalPrincipalStableDebt\": \"1284546062738943839283367\",\n            \"totalScaledVariableDebt\": \"722287471703814443916\",\n            \"utilizationRate\": \"0.16744788\",\n            \"variableBorrowRate\": \"26081326015210012558111691\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"1226382946041792007602144\",\n            \"averageStableRate\": \"0\",\n            \"lifetimeCurrentVariableDebt\": \"35377660157675896517511083\",\n            \"lifetimeDepositorsInterestEarned\": \"57976228897194866917242\",\n            \"lifetimeFlashLoanPremium\": \"1826608386828290662452\",\n            \"lifetimePrincipalStableDebt\": \"0\",\n            \"lifetimeReserveFactorAccrued\": \"6446040804625944080925\",\n            \"lifetimeScaledVariableDebt\": \"34789964360014420223831650\",\n            \"name\": \"Binance USD\",\n            \"reserveFactor\": \"1000\",\n            \"stableBorrowRate\": \"0\",\n            \"stableRateSlope1\": \"0\",\n            \"stableRateSlope2\": \"0\",\n            \"symbol\": \"BUSD\",\n            \"totalCurrentVariableDebt\": \"5772261224659793034234747\",\n            \"totalLiquidity\": \"6932357154268497310365750\",\n            \"totalLiquidityAsCollateral\": \"245630945513869401643945\",\n            \"totalPrincipalStableDebt\": \"0\",\n            \"totalScaledVariableDebt\": \"5676372077395179155846536\",\n            \"utilizationRate\": \"0.82309632\",\n            \"variableBorrowRate\": \"164910419137886749371263650\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"1000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"6599439514103863883485439\",\n            \"averageStableRate\": \"33258708166535156342463290\",\n            \"lifetimeCurrentVariableDebt\": \"1391571046770006903564072\",\n            \"lifetimeDepositorsInterestEarned\": \"142327821516256428369\",\n            \"lifetimeFlashLoanPremium\": \"70063677863298471358\",\n            \"lifetimePrincipalStableDebt\": \"262339556082657321740275\",\n            \"lifetimeReserveFactorAccrued\": \"35665531312269197741\",\n            \"lifetimeScaledVariableDebt\": \"1390766687965808199685202\",\n            \"name\": \"ChainLink Token\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"35136982371120292782033986\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"LINK\",\n            \"totalCurrentVariableDebt\": \"139383343811069557034228\",\n            \"totalLiquidity\": \"6755404821876764418804646\",\n            \"totalLiquidityAsCollateral\": \"3018116093863046301062746\",\n            \"totalPrincipalStableDebt\": \"16780062270455202377018\",\n            \"totalScaledVariableDebt\": \"139302257301166801641191\",\n            \"utilizationRate\": \"0.02308748\",\n            \"variableBorrowRate\": \"3595887659784204947423789\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"490969985524658122353988\",\n            \"averageStableRate\": \"0\",\n            \"lifetimeCurrentVariableDebt\": \"11708159043074477878628860\",\n            \"lifetimeDepositorsInterestEarned\": \"27023492339502522237413\",\n            \"lifetimeFlashLoanPremium\": \"681214316539259143525\",\n            \"lifetimePrincipalStableDebt\": \"0\",\n            \"lifetimeReserveFactorAccrued\": \"6760257920879973934466\",\n            \"lifetimeScaledVariableDebt\": \"11412851380539253286532657\",\n            \"name\": \"Synth sUSD\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"0\",\n            \"stableRateSlope1\": \"0\",\n            \"stableRateSlope2\": \"0\",\n            \"symbol\": \"SUSD\",\n            \"totalCurrentVariableDebt\": \"3625146168406261636946755\",\n            \"totalLiquidity\": \"4081843082476186915142430\",\n            \"totalLiquidityAsCollateral\": \"338966416888734322160043\",\n            \"totalPrincipalStableDebt\": \"0\",\n            \"totalScaledVariableDebt\": \"3532048174673676619821587\",\n            \"utilizationRate\": \"0.87971855\",\n            \"variableBorrowRate\": \"444173136454072789883157100\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"1000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"11486440488826908234768104\",\n            \"averageStableRate\": \"95994468430619039033598848\",\n            \"lifetimeCurrentVariableDebt\": \"81244812491427339571484561\",\n            \"lifetimeDepositorsInterestEarned\": \"235510219377033295570088\",\n            \"lifetimeFlashLoanPremium\": \"7094827306743981404612\",\n            \"lifetimePrincipalStableDebt\": \"64752475026761608156066915\",\n            \"lifetimeReserveFactorAccrued\": \"26171254012232158539386\",\n            \"lifetimeScaledVariableDebt\": \"79519871415322695586561631\",\n            \"name\": \"Dai Stablecoin\",\n            \"reserveFactor\": \"1000\",\n            \"stableBorrowRate\": \"89888810696867587297141284\",\n            \"stableRateSlope1\": \"20000000000000000000000000\",\n            \"stableRateSlope2\": \"750000000000000000000000000\",\n            \"symbol\": \"DAI\",\n            \"totalCurrentVariableDebt\": \"16621199470633464806756521\",\n            \"totalLiquidity\": \"55952264771975133011735578\",\n            \"totalLiquidityAsCollateral\": \"35417399979107137198006890\",\n            \"totalPrincipalStableDebt\": \"28029789488745748801522045\",\n            \"totalScaledVariableDebt\": \"16268308143521968977436025\",\n            \"utilizationRate\": \"0.79470999\",\n            \"variableBorrowRate\": \"39777621393735174594282569\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"750000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"197623650149238589466466\",\n            \"averageStableRate\": \"0\",\n            \"lifetimeCurrentVariableDebt\": \"60000000000000000\",\n            \"lifetimeDepositorsInterestEarned\": \"0\",\n            \"lifetimeFlashLoanPremium\": \"3965022794296015259\",\n            \"lifetimePrincipalStableDebt\": \"0\",\n            \"lifetimeReserveFactorAccrued\": \"0\",\n            \"lifetimeScaledVariableDebt\": \"60000000000000000\",\n            \"name\": \"Aave Token\",\n            \"reserveFactor\": \"0\",\n            \"stableBorrowRate\": \"0\",\n            \"stableRateSlope1\": \"0\",\n            \"stableRateSlope2\": \"0\",\n            \"symbol\": \"AAVE\",\n            \"totalCurrentVariableDebt\": \"0\",\n            \"totalLiquidity\": \"197619685126444293451207\",\n            \"totalLiquidityAsCollateral\": \"90331644614157174548235\",\n            \"totalPrincipalStableDebt\": \"0\",\n            \"totalScaledVariableDebt\": \"0\",\n            \"utilizationRate\": \"-0.00002006\",\n            \"variableBorrowRate\": \"0\",\n            \"variableRateSlope1\": \"0\",\n            \"variableRateSlope2\": \"0\"\n        },\n        {\n            \"availableLiquidity\": \"2236077000775329086065\",\n            \"averageStableRate\": \"50519088814363734086605490\",\n            \"lifetimeCurrentVariableDebt\": \"1256429419722161746800\",\n            \"lifetimeDepositorsInterestEarned\": \"549711284478908778\",\n            \"lifetimeFlashLoanPremium\": \"216958506557453912\",\n            \"lifetimePrincipalStableDebt\": \"237751583407854447450\",\n            \"lifetimeReserveFactorAccrued\": \"137519120422515892\",\n            \"lifetimeScaledVariableDebt\": \"1251112255782340636800\",\n            \"name\": \"Maker\",\n            \"reserveFactor\": \"2000\",\n            \"stableBorrowRate\": \"35909762142188354861667572\",\n            \"stableRateSlope1\": \"100000000000000000000000000\",\n            \"stableRateSlope2\": \"3000000000000000000000000000\",\n            \"symbol\": \"MKR\",\n            \"totalCurrentVariableDebt\": \"61080753134329062517\",\n            \"totalLiquidity\": \"2296366463140223519880\",\n            \"totalLiquidityAsCollateral\": \"915776400153669818850\",\n            \"totalPrincipalStableDebt\": \"4436622090371123\",\n            \"totalScaledVariableDebt\": \"60822261592436650789\",\n            \"utilizationRate\": \"0.02625428\",\n            \"variableBorrowRate\": \"4136833499531848403167300\",\n            \"variableRateSlope1\": \"70000000000000000000000000\",\n            \"variableRateSlope2\": \"3000000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"13663105488948\",\n            \"averageStableRate\": \"90642577897570904442516372\",\n            \"lifetimeCurrentVariableDebt\": \"133140674630981\",\n            \"lifetimeDepositorsInterestEarned\": \"351945421520\",\n            \"lifetimeFlashLoanPremium\": \"13151770464\",\n            \"lifetimePrincipalStableDebt\": \"115427685772796\",\n            \"lifetimeReserveFactorAccrued\": \"38388642505\",\n            \"lifetimeScaledVariableDebt\": \"130582664057346\",\n            \"name\": \"USD Coin\",\n            \"reserveFactor\": \"1000\",\n            \"stableBorrowRate\": \"89162336598454197145918620\",\n            \"stableRateSlope1\": \"20000000000000000000000000\",\n            \"stableRateSlope2\": \"600000000000000000000000000\",\n            \"symbol\": \"USDC\",\n            \"totalCurrentVariableDebt\": \"25350748637641\",\n            \"totalLiquidity\": \"92621150515907\",\n            \"totalLiquidityAsCollateral\": \"84461899396082\",\n            \"totalPrincipalStableDebt\": \"53874873939076\",\n            \"totalScaledVariableDebt\": \"24863688742200\",\n            \"utilizationRate\": \"0.85248395\",\n            \"variableBorrowRate\": \"38324673196908394291837240\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"600000000000000000000000000\"\n        },\n        {\n            \"availableLiquidity\": \"5600847997277\",\n            \"averageStableRate\": \"93927265315560947126924933\",\n            \"lifetimeCurrentVariableDebt\": \"80322806759419\",\n            \"lifetimeDepositorsInterestEarned\": \"249393341575\",\n            \"lifetimeFlashLoanPremium\": \"4865914550\",\n            \"lifetimePrincipalStableDebt\": \"43234084955432\",\n            \"lifetimeReserveFactorAccrued\": \"27716987845\",\n            \"lifetimeScaledVariableDebt\": \"77949891987328\",\n            \"name\": \"Tether USD\",\n            \"reserveFactor\": \"1000\",\n            \"stableBorrowRate\": \"89560484737614516102834566\",\n            \"stableRateSlope1\": \"20000000000000000000000000\",\n            \"stableRateSlope2\": \"600000000000000000000000000\",\n            \"symbol\": \"USDT\",\n            \"totalCurrentVariableDebt\": \"17118946613642\",\n            \"totalLiquidity\": \"46499541035758\",\n            \"totalLiquidityAsCollateral\": \"11342176012824\",\n            \"totalPrincipalStableDebt\": \"24009099615849\",\n            \"totalScaledVariableDebt\": \"16612875814496\",\n            \"utilizationRate\": \"0.87955046\",\n            \"variableBorrowRate\": \"39120969475229032205669132\",\n            \"variableRateSlope1\": \"40000000000000000000000000\",\n            \"variableRateSlope2\": \"600000000000000000000000000\"\n        }\n        ]\n    }\n};\n\nexport function getInstantPoolDepositAPY(reserve) {\n    let decimals = reserve.decimals;\n    console.log(reserve.symbol);\n    console.log('# decimals:', reserve.decimals);\n    console.log('utilizationRate: ', reserve.utilizationRate);\n    console.log('averageStableRate: ', getDecimal(reserve.averageStableRate, 27));\n    console.log('totalPrincipalStableDebt: ', getDecimal(reserve.totalPrincipalStableDebt, decimals));\n    console.log('variableBorrowRate: ', getDecimal(reserve.variableBorrowRate, 27));\n    console.log('totalCurrentVariableDebt: ', getDecimal(reserve.totalCurrentVariableDebt, decimals));\n    console.log('reserveFactor: ', getDecimal(reserve.reserveFactor, 4));\n\n    \n    let totalDebt = getDecimal(reserve.totalCurrentVariableDebt, decimals) + getDecimal(reserve.totalPrincipalStableDebt, decimals) \n    let shareStableBorrows = getDecimal(reserve.totalPrincipalStableDebt, decimals) / totalDebt\n    console.log('V2shareStableBorrows: ', shareStableBorrows)\n    let shareVariableBorrows = getDecimal(reserve.totalCurrentVariableDebt, decimals) /totalDebt\n    console.log('V2shareVariableBorrows: ', shareVariableBorrows) \n\n    let apy = BigNumber(reserve.utilizationRate) *\n            (\n                shareStableBorrows * getDecimal(reserve.averageStableRate, 27)\n                + shareVariableBorrows * getDecimal(reserve.variableBorrowRate, 27)\n            )\n            * (1 - getDecimal(reserve.reserveFactor, 4));\n    return apy\n}\n\nexport function getAverageRate(liquidityIndexEarliest, liquidityIndexLatest, timestampEarliest, timestampLatest) {\n    let averageRate = calculateAverageRate(\n        liquidityIndexEarliest,\n        liquidityIndexLatest,\n        timestampEarliest,\n        timestampLatest\n    );\n    return averageRate\n}\n\nexport function getDecimal(number, precision) {\n    let result = BigNumber(number) / BigNumber(10) ** BigNumber(precision);\n    return result\n}\n\nexport function formatAsPercent(decimal) {\n    return parseFloat(decimal*100).toFixed(2) + \"%\"\n}\n\nexport function downsampleData(data, targetLength) {\n    if (data.length > targetLength) {\n        let window = (data.length - 1) / (targetLength - 1);  \n        let sampled = [];\n        for (let i=0; i < targetLength ; i++) {\n            sampled[i] = data[Math.round(i*window)]; \n        }\n        return sampled;\n    }\n    return data;\n}\n\nexport function formatGraphData(paramsHistory, deposit) {\n    invariant(typeof deposit === \"number\", \"expected deposit to be a number\");\n    ///call getAverageRate on each pair of items\n    let interests  = [];\n    let graphData = [];\n\n    interests[0] = 0;\n\n    graphData[0] = {\n        day: paramsHistory[0].timestamp, \n        Principle: deposit, \n        Borrowed: null,\n        Interest: interests[0],\n        InterestUsd: interests[0],\n        OwedInterest: null,\n        OwedInterestUsd: null,\n        DepositRate: formatAsPercent(0),\n        BorrowRate: null\n    }\n    //get rid of duplicates\n    let filtered = uniqBy(paramsHistory, \"timestamp\");\n    let sampled = downsampleData(filtered, 720); // for graphing purposes\n\n    let i;\n    for (i = 0; i < sampled.length-1; i++) {\n        const averageRate = getAverageRate(\n            sampled[i].liquidityIndex, \n            sampled[i+1].liquidityIndex,\n            sampled[i].timestamp, \n            sampled[i+1].timestamp\n        );\n        const interest = (deposit + interests[i]) * averageRate * (sampled[i+1].timestamp - sampled[i].timestamp) / (365 * 24 * 60 * 60);\n        interests[i+1] = interests[i]+ interest;\n\n        const interestUsd = interests[i+1] * sampled[i+1].priceInUsd;\n\n        graphData[i+1] = {\n            day: sampled[i+1].timestamp, \n            Principle: deposit,\n            Borrowed: null,\n            Interest: interests[i+1],\n            InterestUsd: interestUsd,\n            OwedInterest: null,\n            OwedInterestUsd: null,\n            DepositRate: parseFloat(averageRate*100).toFixed(2),\n            BorrowRate: null\n        }\n    }\n\n    return graphData;\n\n}\n\nexport function formatGraphDataVariableBorrowed(paramsHistory, deposit) {\n    invariant(typeof deposit === \"number\", \"expected deposit to be a number\");\n    ///call getAverageRate on each pair of items\n    let interests  = [];\n    let graphData = [];\n\n    interests[0] = 0;\n\n    graphData[0] = {\n        day: paramsHistory[0].timestamp, \n        Principle: null, \n        Borrowed: deposit,\n        Interest: null,\n        InterestUsd: null,\n        OwedInterest: interests[0],\n        OwedInterestUsd: interests[0],\n        DepositRate: null,\n        BorrowRate: formatAsPercent(0),\n    }\n    //get rid of duplicates\n    let filtered = uniqBy(paramsHistory, \"timestamp\");\n    let sampled = downsampleData(filtered, 720); // for graphing purposes\n\n    let i;\n    for (i = 0; i < sampled.length-1; i++) {\n        const averageRate = getAverageRate(\n            sampled[i].variableBorrowIndex, \n            sampled[i+1].variableBorrowIndex,\n            sampled[i].timestamp, \n            sampled[i+1].timestamp\n        );\n        const interest = (deposit + interests[i]) * averageRate * (sampled[i+1].timestamp - sampled[i].timestamp) / (365 * 24 * 60 * 60);\n        interests[i+1] = interests[i]+ interest;\n\n        const interestUsd = interests[i+1] * sampled[i+1].priceInUsd;\n\n        graphData[i+1] = {\n            day: sampled[i+1].timestamp, \n            Principle: null,\n            Borrowed: deposit,\n            Interest: null,\n            InterestUsd: null,\n            OwedInterest: interests[i+1],\n            OwedInterestUsd: interestUsd,\n            DepositRate: null,\n            BorrowRate: parseFloat(averageRate*100).toFixed(2),\n        }\n    }\n\n    return graphData;\n\n}","import React, { useState, useMemo } from 'react';\nimport { gql } from '@apollo/client';\nimport { useParamsHistoryData } from '../hooks/useParamsHistoryData';\nimport { formatGraphData , formatGraphDataVariableBorrowed} from '../helpers.js';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, ComposedChart, Tooltip, Legend\n  } from 'recharts';\n\n// const GET_CURRENT_ASSET_DATA_FOR_AVG_APY = gql`\n//   query ReservesRatesCurrent($symbol: String!) {\n//       reserves(where: {symbol: $symbol}) {\n//           id\n//           pool\n//           symbol\n//           lastUpdateTimestamp\n//           liquidityIndex\n//           variableBorrowIndex\n//       }\n//   }  \n// `;  \n\nconst GET_HISTORICAL_ASSET_DATA_FOR_AVG_APY = gql`\n    query ReservesRatesHistory($timestamp_gt: Int, $timestamp_lte: Int, $symbol: String!, $first: Int) {\n        reserves(where: {symbol: $symbol}) {\n            id\n            symbol\n            paramsHistory(where: {timestamp_gt: $timestamp_gt, timestamp_lte: $timestamp_lte}, first: $first, orderBy: timestamp, orderDirection: asc) {\n                id\n                liquidityIndex\n                timestamp\n                priceInUsd\n            }\n        }\n    }  \n`;\n\nconst GET_HISTORICAL_ASSET_DATA_FOR_VARIABLE_RATE = gql`\n    query VBReservesRatesHistory($timestamp_gt: Int, $timestamp_lte: Int, $symbol: String!, $first: Int) {\n        reserves(where: {symbol: $symbol}) {\n            id\n            symbol\n            paramsHistory(where: {timestamp_gt: $timestamp_gt, timestamp_lte: $timestamp_lte}, first: $first, orderBy: timestamp, orderDirection: asc) {\n                id\n                variableBorrowIndex\n                variableBorrowRate\n                timestamp\n                priceInUsd\n            }\n        }\n    }  \n`;\n\n\n\nconst Graph = ({asset, deposit, borrowAsset, borrowAmount, graphType, currencySelectedOption, setInterestOwed, setInterestEarned}) => {\n    const [now] = useState(Math.round(Date.now() / 1000));\n    const [daysAgo30] = useState(Math.round((Date.now()-(30*24*60*60*1000)) / 1000));\n    console.log(\"now:\", now);\n    console.log(\"daysAgo30:\", daysAgo30);\n\n    const {\n        data: dataAvg,\n        loading: loadingAvg,\n        error: errorAvg,\n      } = useParamsHistoryData(\n        GET_HISTORICAL_ASSET_DATA_FOR_AVG_APY,\n        asset,\n        now,\n        daysAgo30\n      );\n    \n    const {\n        data: dataBor,\n        loading: loadingBor,\n        error: errorBor,\n      } = useParamsHistoryData(\n        GET_HISTORICAL_ASSET_DATA_FOR_VARIABLE_RATE,\n        borrowAsset,\n        now,\n        daysAgo30\n      );\n\n    const graphData = useMemo(\n        () => {\n            if (loadingAvg || errorAvg)\n                return null;\n            else\n                return formatGraphData(dataAvg.reserves[0].paramsHistory, deposit);\n        },\n        [loadingAvg, errorAvg, dataAvg, deposit]\n      );\n\n    const graphDataVariableBorrow = useMemo(\n        () => {\n            if (loadingBor || errorBor)\n                return null;\n            else\n                return formatGraphDataVariableBorrowed(dataBor.reserves[0].paramsHistory, borrowAmount);\n        },\n        [loadingBor, errorBor, dataBor, borrowAmount]\n      );\n\n    if (loadingAvg)\n        return 'Loading...';\n    if (loadingBor)\n        return 'Loading...';\n    if (errorAvg)\n        return `Error! ${errorAvg.message}`;\n    if (errorBor)\n        return `Error! ${errorBor.message}`;\n\n    //console.log(\"Rendering with dataAvg.reserves[0].paramsHistory.length\", dataAvg.reserves[0].paramsHistory.length, dataAvg.reserves[0].paramsHistory.slice(-1)[0].id);\n\n    //let options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour12: false};\n    if (graphType === \"interest\") {\n        //console.log(\"here\", graphDataVariableBorrow[graphDataVariableBorrow.length - 1].OwedInterestUsd);\n        setInterestOwed(graphDataVariableBorrow[graphDataVariableBorrow.length-1].OwedInterestUsd);\n        console.log(\"Setting InterestUsd state in graph with: \", graphData[graphData.length-1].InterestUsd)\n        setInterestEarned(graphData[graphData.length-1].InterestUsd);\n        return (\n            <>\n            <ResponsiveContainer width=\"100%\" height=\"85%\">\n                <ComposedChart\n                    padding={{top:0}}\n                    margin={{\n                    top: 0, right: 30, left: 30, bottom: 30,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <defs>\n                        <linearGradient id=\"colorUv\"  x1=\"0\" y1=\"1\" x2=\"1\" y2=\"0\">\n                            <stop offset=\"5%\" stopColor=\"#2EBAC6\" stopOpacity={0.7}/>\n                            <stop offset=\"95%\" stopColor=\"#B6509E\" stopOpacity={0.7}/>\n                        </linearGradient>\n                    </defs>\n                    <XAxis \n                        label={{ value: 'Day', position: \"insideBottom\", offset: -10 }}\n                        scale=\"time\"\n                        type=\"number\"\n                        domain = {['auto', 'auto']}\n                        tickCount={9}\n                        angle={-30}\n                        interval=\"preserveStartEnd\"\n                        tickFormatter = {(unixTime) => new Date(unixTime*1000).toLocaleDateString(\"default\", { month: 'short', day: \"numeric\" })}\n                        dataKey=\"day\"\n                        />\n                    <YAxis \n                        label={{ value: currencySelectedOption === \"native\" ?  asset:\"USD\", angle: -90, position: 'insideLeft'}}\n                    />\n                    <Tooltip \n                        labelFormatter={(unixTime) => new Date(unixTime*1000).toLocaleString('en-US')}\n                        formatter={\n                            (value,) => ( \n                                [\n                                    currencySelectedOption === \"native\" ? value.toFixed(3).toString():\"$\".concat(value.toFixed(2).toString()), \n                                ]\n                            )\n                        }\n                    />\n                    <Legend verticalAlign=\"top\" height={36} />\n                    <Line \n                        type=\"monotone\" \n                        data={graphData} \n                        dataKey={currencySelectedOption === \"native\" ?  \"Interest\":\"InterestUsd\"}\n                        unit={currencySelectedOption === \"native\" ?  \" \".concat(asset):\"\"}\n                        name=\"Earned Interest\" \n                        stackId=\"1\" \n                        fill=\"#B6509E\" \n                        stroke=\"#B6509E\" \n                        />\n                    <Line \n                        type=\"monotone\" \n                        data={graphDataVariableBorrow} \n                        dataKey={currencySelectedOption === \"native\" ?  \"OwedInterest\":\"OwedInterestUsd\"} \n                        unit={currencySelectedOption === \"native\" ?  \" \".concat(borrowAsset):\"\"}\n                        name=\"Owed Interest\" \n                        stackId=\"1\" \n                        stroke=\"#2EBAC6\" \n                        fill=\"#2EBAC6\" \n                        />\n                </ComposedChart>\n            </ResponsiveContainer>\n            </>\n        );\n    }\n    else\n        return (\n            <ResponsiveContainer width=\"100%\" height=\"85%\">\n                <LineChart\n                    data={graphData}\n                    margin={{\n                    top: 20, right: 30, left: 30, bottom: 20,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                        label={{ value: 'Day', position: \"insideBottom\", offset: -10 }}\n                        scale=\"time\"\n                        type=\"number\"\n                        domain = {['auto', 'auto']}\n                        tickCount={9}\n                        angle={-30}\n                        interval=\"preserveStartEnd\"\n                        tickFormatter = {(unixTime) => new Date(unixTime*1000).toLocaleDateString()}\n                        dataKey=\"day\"\n                        />\n                    <YAxis \n                        label={{ value: \"Percent\", angle: -90, position: 'insideLeft'}}\n                    />\n                    <Tooltip \n                        labelFormatter={(unixTime) => new Date(unixTime*1000).toLocaleString('en-US')}\n                    />\n                    <Legend verticalAlign=\"top\" height={36} />\n                    <Line \n                        type=\"monotone\" \n                        dataKey=\"DepositRate\" \n                        name=\"Deposit Rate\" \n                        stackId=\"1\" \n                        stroke=\"#B6509E\" \n                        fill=\"#2EBAC6\" \n                        />\n                </LineChart>\n            </ResponsiveContainer>\n        );\n}\n\nexport default Graph;","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport {formatAsPercent, getInstantPoolDepositAPY} from '../helpers.js';\n\nconst GET_ASSET_DATA_FOR_APY = gql`\n  query GetAssetDataForAPY($symbol: String!) \n    {\n        reserves (where: {symbol: $symbol}) {\n          symbol\n          decimals\n          averageStableRate\n          utilizationRate\n          totalCurrentVariableDebt\n          reserveFactor\n          totalPrincipalStableDebt\n          borrowingEnabled\n          stableDebtLastUpdateTimestamp\n          variableBorrowRate\n        }\n    }\n`;\n\nfunction CurrentAPYDisplay ({ asset }) {\n    const { loading, error, data } = useQuery(GET_ASSET_DATA_FOR_APY, {\n        variables: {symbol: asset},\n        pollInterval: 15000,\n    });\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;   \n    \n    //console.log(formatAsPercent(getInstantPoolDepositAPY(data.reserves[0])));\n    return (\n      <div class=\"row\">\n      <div class=\"card\" style={{height: \"auto\"}}>\n        <div class=\"card-body\">\n             \n            <h5 class=\"card-title text-success\">{formatAsPercent(getInstantPoolDepositAPY(data.reserves[0]))}\n            </h5>\n            <p>Current Deposit APY Rate</p>\n        </div>\n     </div>\n  </div>\n    );\n  };\n  \nexport default CurrentAPYDisplay;","import React, { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport {formatAsPercent, getAverageRate} from '../helpers.js';\n\nconst GET_ASSET_DATA_FOR_AVG_APY_30_DAYS = gql`\n  query GetAssetDataForAvgAPY30Days($symbol: String!, $timestamp_gte:Int) {\n      reserves(where: {symbol: $symbol}) {\n          id\n          pool\n          symbol\n          lastUpdateTimestamp\n          liquidityIndex\n          paramsHistory(where: {timestamp_gte: $timestamp_gte}, first: 1, orderBy: timestamp,  orderBy: liquidityIndex, orderDirection: asc) {\n            liquidityIndex\n            timestamp\n        }\n      }\n  }  \n`;  \n\nfunction Avg30DayAPYDisplay ({ asset }) {\n    const [daysAgo30] = useState(Math.round((Date.now()-(30*24*60*60*1000)) / 1000));\n\n    const { loading, error, data } = useQuery(GET_ASSET_DATA_FOR_AVG_APY_30_DAYS, {\n        variables: {symbol: asset, timestamp_gte: daysAgo30},\n        pollInterval: 60000,\n    });\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;   \n    \n    return (\n      <div class=\"row\">\n          <div class=\"card\" style={{height: \"auto\"}}>\n            <div class=\"card-body\" >\n                \n                <h5 class=\"text-success\">{ \n                formatAsPercent(\n                    getAverageRate(\n                        data.reserves[0].paramsHistory[0].liquidityIndex,\n                        data.reserves[0].liquidityIndex,\n                        data.reserves[0].paramsHistory[0].timestamp,\n                        data.reserves[0].lastUpdateTimestamp\n                        )\n                    )\n                }\n                </h5>\n                <p class=\"card-title\">30 Day Avg. Deposit APY Rate</p> \n            </div>\n         </div>\n      </div>\n    );\n  };\n  \nexport default Avg30DayAPYDisplay;","import React, { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport {formatAsPercent, getAverageRate} from '../helpers.js';\n\nconst GET_ASSET_DATA_FOR_AVG_VARIABLE_30_DAYS = gql`\n  query GetAssetDataForAvgVariable30Days($symbol: String!, $timestamp_gte:Int) {\n      reserves(where: {symbol: $symbol}) {\n          id\n          pool\n          symbol\n          lastUpdateTimestamp\n          variableBorrowIndex\n          paramsHistory(where: {timestamp_gte: $timestamp_gte}, first: 1, orderBy: timestamp, orderBy: variableBorrowIndex, orderDirection: asc) {\n            variableBorrowIndex\n            timestamp\n        }\n      }\n  }  \n`;  \n\nfunction Avg30DayVariableAPYDisplay ({ asset }) {\n    const [daysAgo30] = useState(Math.round((Date.now()-(30*24*60*60*1000)) / 1000));\n\n    const { loading, error, data } = useQuery(GET_ASSET_DATA_FOR_AVG_VARIABLE_30_DAYS, {\n        variables: {symbol: asset, timestamp_gte: daysAgo30},\n        pollInterval: 60000,\n    });\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;   \n    \n    return (\n      <div class=\"row\">\n          <div class=\"card\" style={{height: \"auto\"}}>\n            <div class=\"card-body\" >\n                \n                <h5 class=\"text-danger\">{ \n                formatAsPercent(\n                    getAverageRate(\n                        data.reserves[0].paramsHistory[0].variableBorrowIndex,\n                        data.reserves[0].variableBorrowIndex,\n                        data.reserves[0].paramsHistory[0].timestamp,\n                        data.reserves[0].lastUpdateTimestamp\n                        )\n                    )\n                }\n                </h5>\n                <p class=\"card-title\">30 Day Avg. Variable Borrow Rate</p> \n            </div>\n         </div>\n      </div>\n    );\n  };\n  \nexport default Avg30DayVariableAPYDisplay;","import React from 'react';\n\nfunction InterestBalance ({ interestEarned, interestOwed }) {\n    \n    return (\n      <div class=\"row\">\n          <div class=\"card\" style={{height: \"auto\"}}>\n            <div class=\"card-body\" >\n                \n                <h5 class={interestEarned>=interestOwed ? \"text-success\":\"text-danger\"}>\n                    ${Math.abs(interestEarned-interestOwed).toFixed(2).toString()}\n                </h5>\n                <p class=\"card-title\">Interest you would've {interestEarned>=interestOwed ? \"earned\":\"owed\"}.</p> \n            </div>\n         </div>\n      </div>\n    );\n  };\n  \nexport default InterestBalance;","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport {formatAsPercent, getDecimal} from '../helpers.js';\n\nconst GET_ASSET_DATA_FOR_BORROW_APR = gql`\n  query GetAssetDataForBorrow($symbol: String!) \n    {\n        reserves (where: {symbol: $symbol}) {\n          variableBorrowRate\n          stableBorrowRate\n        }\n    }\n`;\n\nfunction CurrentBorrowDisplay ({ asset }) {\n    const { loading, error, data } = useQuery(GET_ASSET_DATA_FOR_BORROW_APR, {\n        variables: {symbol: asset},\n        pollInterval: 60000,\n    });\n\n    if (loading)\n        return 'Loading...';\n    if (error)\n        return `Error! ${error.message}`;   \n    \n    //console.log(formatAsPercent(getInstantPoolDepositAPY(data.reserves[0])));\n    return (\n      <React.Fragment>\n        <div class=\"row\">\n      <div class=\"row\">\n        <div class=\"card\" style={{height: \"auto\"}}>\n            <div class=\"card-body\">\n                <h5 class=\"card-title text-danger\">{formatAsPercent(getDecimal(data.reserves[0].variableBorrowRate,27))}\n                </h5>\n                <p>Current Variable Borrow APR Rate</p>\n            </div>\n        </div>\n      </div>\n      </div>\n      <div class=\"row\">\n      <div class=\"row\">\n          <div class=\"card\" style={{height: \"auto\"}}>\n              <div class=\"card-body\">\n                  <h5 class=\"card-title text-danger\">{formatAsPercent(getDecimal(data.reserves[0].stableBorrowRate,27))}\n                  </h5>\n                  <p>Current Stable APR Rate</p>\n              </div>\n          </div>\n      </div>\n      </div>\n      </React.Fragment>\n    );\n  };\n  \nexport default CurrentBorrowDisplay;","import React from 'react';\n\nfunction Footer() {\n    return(\n        <div class=\"footer\">\n            <div class=\"card-footer text-muted\">\n               Use for estimate purposes only and don't forget those ⛽ fees :)\n            </div>    \n        </div>\n    )\n}\n\nexport default Footer;","import './../styles/App.css';\nimport React, { useState } from 'react';\nimport Header from './Header.js';\nimport SelectDepositAsset from './SelectDepositAsset.js';\nimport SelectBorrowAsset from './SelectBorrowAsset.js';\nimport DepositAmountTextbox from './DepositAmountTextbox.js';\nimport BorrowAmountTextbox from './BorrowAmountTextbox.js';\nimport GraphRadio from './GraphRadio';\nimport CurrencyRadio from './CurrencyRadio.js';\nimport Graph from './Graph.js';\nimport CurrentAPYDisplay from './CurrentAPYDisplay.js';\nimport Avg30DayAPYDisplay from './Avg30DayAPYDisplay.js';\nimport Avg30DayVariableAPYDisplay from './Avg30DayVariableAPYDisplay.js';\nimport InterestBalance from './InterestBalance.js';\nimport CurrentBorrowDisplay from './CurrentBorrowDisplay.js';\nimport Footer from './Footer.js';\n\nfunction App() {\n  const [asset, setAsset] = useState(\"DAI\");\n  const [depositAssetAsCollatoral, setDepositAssetAsCollatoral] = useState(true);\n  const [borrowAsset, setBorrowAsset] = useState(\"DAI\");\n  const [deposit, setDeposit] = useState(1000);\n  const [borrowed, setBorrowed] = useState(0);\n  const [radioSelectedOption, setRadioSelectedOption] = useState(\"interest\");\n  const [currencySelectedOption, setCurrencySelectedOption] = useState(\"usd\");\n  const [interestEarned, setInterestEarned] = useState(0);\n  const [interestOwed, setInterestOwed] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <Header class=\"row\" />\n      <div className=\"App-page\">\n        <div class=\"container-fluid row\">\n          <div class=\"col-2\">\n            <SelectDepositAsset \n              onChange={setAsset} \n              value={asset} \n              depositAssetAsCollatoral={depositAssetAsCollatoral} \n              setDepositAssetAsCollatoral={setDepositAssetAsCollatoral}\n            />\n          </div>\n          <div class=\"col-3\">\n            <DepositAmountTextbox onChange={setDeposit} value={deposit} />\n          </div>\n          <div class=\"col-2\">\n            <SelectBorrowAsset onChange={setBorrowAsset} value={borrowAsset} />\n          </div>\n          <div class=\"col-3\">\n            <BorrowAmountTextbox onChange={setBorrowed} value={borrowed} />\n          </div>\n        </div>\n        \n        <div class=\"container-fluid row\">\n          <div class=\"col-9\">\n            <div class=\"row\">\n              <div class=\"col-3\"> \n                <GraphRadio onChange={setRadioSelectedOption} radioSelectedOption={radioSelectedOption} />\n              </div>\n              <div class=\"col-3\">\n                <CurrencyRadio onChange={setCurrencySelectedOption} currencySelectedOption={currencySelectedOption} />\n              </div>\n            </div>\n            <div class=\"row Graph\">\n              {radioSelectedOption === \"interest\" &&\n                <h4>Accumulated Interest Based on Last 30 Days</h4>\n              }\n              {radioSelectedOption === \"rate\" &&\n                <h4>Historical Rate Over the Last 30 Days</h4>\n              }\n              <Graph asset={asset} \n                deposit={deposit} \n                borrowAsset={borrowAsset} \n                borrowAmount={borrowed} \n                graphType={radioSelectedOption} \n                currencySelectedOption={currencySelectedOption}\n                setInterestOwed={setInterestOwed}\n                setInterestEarned={setInterestEarned}\n                />\n            </div>\n          </div>\n          <div class=\"container-fluid col-3 stats\">\n            <div class=\"row\">\n              <InterestBalance interestEarned={interestEarned} interestOwed={interestOwed} />\n            </div>\n            <div class=\"row\">\n                <CurrentAPYDisplay asset={asset} />\n        </div>\n        <div class=\"row\">\n                <Avg30DayAPYDisplay asset={asset} />\n              </div>\n            <div class=\"row\">\n              <Avg30DayVariableAPYDisplay asset={borrowAsset} />\n            </div>\n            <CurrentBorrowDisplay asset={borrowAsset}/>\n          </div>\n        </div>\n      </div>\n      <Footer className=\"App-footer\"/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  //uri: 'https://api.thegraph.com/subgraphs/name/aave/protocol'\n  uri: 'https://api.thegraph.com/subgraphs/name/aave/protocol-v2'\n});\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          reserves: {\n            keyArgs: [\"where\", [\"symbol\"], \"orderBy\"],\n          }\n        }\n      },\n      Reserve: {\n        fields: {\n          paramsHistory: {\n            // Don't cache separate results based on\n            // any of this field's arguments.\n            keyArgs: [\"first\", \"orderDirection\", \"orderBy\", \"where\", [\"timestamp_lte\"]],\n            // Concatenate the incoming list items with\n            // the existing list items.\n            merge(existing, incoming, { args }) {\n              // console.log(\"Merging args: \",args);\n              // console.log(\"Incoming length:\", incoming.length);\n              if (!incoming.length)\n                return existing;\n              return existing ? [...existing, ...incoming] : incoming;\n            },\n          }\n        }\n      }\n    }\n  })\n});\n\n// 4\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}